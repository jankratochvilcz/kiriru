{"version":3,"sources":["assets/logo.png","components/atoms/Logo.tsx","components/organisms/AppHeader.tsx","components/organisms/Footer.tsx","assets/illustrations/noun_Sputnik_190534.svg","assets/illustrations/noun_dog astronaut_4119784.svg","assets/illustrations/noun_Astronaut_3437987.svg","assets/illustrations/noun_Astronaut_3437785.svg","assets/illustrations/noun_space station_2677019.svg","assets/illustrations/noun_spaceshuttle_1675163.svg","components/molecules/Level.tsx","components/pages/Levels.tsx","functions/array.ts","functions/impression.ts","models/cyrillicAlphabet.ts","components/atoms/Button.tsx","components/molecules/Card.tsx","assets/illustrations/noun_Sputnik_190534_gray.svg","components/organisms/PracticeProgress.tsx","components/pages/Practice.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Logo","to","className","src","logo","alt","AppHeader","Footer","href","Level","achievmentTitle","illustrationPath","letters","achievmentLink","history","useHistory","onClick","push","JSON","stringify","map","x","Levels","sputnikIllustration","laikaIllustration","gagarinIllustration","tereshkovaIllustration","salyutIllustration","buranIllustration","shuffleArray","array","randomIndex","result","currentIndex","length","Math","floor","random","getRevealedStateText","impression","impressionType","letter","upperCase","lowerCase","transliteration","getInstruction","cyrillicAlphabet","Button","title","cssClass","size","kind","classNames","large","primary","Card","text","itallic","RADIUS","PracticeProgress","percentage","degree","sin","PI","y","cos","marginLeft","marginTop","style","width","height","rocket","transform","Practice","useState","remainingImpressions","setRemainingImpressions","currentImpression","setCurrentImpression","isRevealed","setIsRevealed","initialImpressionCount","setInitialImpressionCount","useEffect","lettersToPractice","filter","some","letterToPracticeDuplicated","shuffled","slice","goToNextImpression","nextRemainingImpressions","nextImpression","updatedRemainingImpressions","console","log","undefined","Error","alreadyHasAnotherImpressionInstance","shuffledRemainingImpressions","App","path","exact","render","props","parse","match","params","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc4aa53e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.79740181.png\";","import { Link } from \"react-router-dom\";\nimport logo from \"../../assets/logo.png\";\nimport \"./Logo.scss\";\n\nconst Logo = () => (\n    <Link to=\"/\">\n        <img className=\"logo\" src={logo} alt=\"Kiriru logo\" />\n    </Link>\n);\n\nexport default Logo;\n","import Logo from \"../atoms/Logo\";\nimport \"./AppHeader.scss\";\n\nconst AppHeader = () => {\n    return (\n        <div>\n            <Logo />\n        </div>\n    );\n};\n\nexport default AppHeader;\n","import \"./Footer.scss\";\n\nconst Footer = () => (\n    <div className=\"footer-root\">\n        <div>\n            by <a href=\"https://janjan.xyz\">Jan</a>\n        </div>\n        <div>\n            source on <a href=\"github.com/jankratochvilcz/kiriru/\">GitHub</a>\n        </div>\n    </div>\n);\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/noun_Sputnik_190534.7181f209.svg\";","export default __webpack_public_path__ + \"static/media/noun_dog astronaut_4119784.d469fc47.svg\";","export default __webpack_public_path__ + \"static/media/noun_Astronaut_3437987.d2377867.svg\";","export default __webpack_public_path__ + \"static/media/noun_Astronaut_3437785.4fbff19f.svg\";","export default __webpack_public_path__ + \"static/media/noun_space station_2677019.cda22c5a.svg\";","export default __webpack_public_path__ + \"static/media/noun_spaceshuttle_1675163.1e5df0e6.svg\";","import { useHistory } from \"react-router-dom\";\nimport \"./Level.scss\";\n\ntype LevelProps = {\n    achievmentTitle: string;\n    illustrationPath: string;\n    letters: string[];\n    achievmentLink: string;\n};\n\nconst Level = ({\n    achievmentTitle,\n    illustrationPath,\n    letters,\n    achievmentLink,\n}: LevelProps) => {\n    const history = useHistory();\n\n    return (\n        <div\n            className=\"level-root\"\n            onClick={() => history.push(`/practice/${JSON.stringify(letters)}`)}\n        >\n            <a className=\"achievment\" href={achievmentLink}>\n                {achievmentTitle}\n            </a>\n            <div className=\"center-column\">\n                <div className=\"line\" />\n                <div className=\"illustration\">\n                    <img src={illustrationPath} alt={achievmentTitle} />\n                </div>\n                <div className=\"line\" />\n            </div>\n            <div className=\"letters\">\n                {letters.map((x) => (\n                    <span>{x}</span>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Level;\n","import sputnikIllustration from \"../../assets/illustrations/noun_Sputnik_190534.svg\";\nimport laikaIllustration from \"../../assets/illustrations/noun_dog astronaut_4119784.svg\";\nimport gagarinIllustration from \"../../assets/illustrations/noun_Astronaut_3437987.svg\";\nimport tereshkovaIllustration from \"../../assets/illustrations/noun_Astronaut_3437785.svg\";\nimport salyutIllustration from \"../../assets/illustrations/noun_space station_2677019.svg\";\nimport buranIllustration from \"../../assets/illustrations/noun_spaceshuttle_1675163.svg\";\nimport Level from \"../molecules/Level\";\n\nconst Levels = () => {\n    return (\n        <div>\n            <Level\n                achievmentTitle=\"Sputnik 1\"\n                achievmentLink=\"https://en.wikipedia.org/wiki/Sputnik_1\"\n                illustrationPath={sputnikIllustration}\n                letters={[\"О\", \"Е\", \"А\", \"И\", \"Н\", \"Т\"]}\n            />\n            <Level\n                achievmentTitle=\"Laika\"\n                achievmentLink=\"https://en.wikipedia.org/wiki/Laika\"\n                illustrationPath={laikaIllustration}\n                letters={[\"С\", \"Л\", \"В\", \"Р\", \"К\", \"М\"]}\n            />\n            <Level\n                achievmentTitle=\"Yuri Gagarin\"\n                achievmentLink=\"https://en.wikipedia.org/wiki/Yuri_Gagarin\"\n                illustrationPath={gagarinIllustration}\n                letters={[\"Д\", \"П\", \"Ы\", \"У\", \"Б\", \"Я\"]}\n            />\n            <Level\n                achievmentTitle=\"Valentina Tereshkova\"\n                achievmentLink=\"https://en.wikipedia.org/wiki/Valentina_Tereshkova\"\n                illustrationPath={tereshkovaIllustration}\n                letters={[\"Ь\", \"Г\", \"З\", \"Ч\", \"Й\", \"Ж\"]}\n            />\n            <Level\n                achievmentTitle=\"Salyut 1\"\n                achievmentLink=\"https://en.wikipedia.org/wiki/Salyut_1\"\n                illustrationPath={salyutIllustration}\n                letters={[\"Х\", \"Ш\", \"Ю\", \"Ц\", \"Э\", \"Щ\"]}\n            />\n            <Level\n                achievmentTitle=\"Buran\"\n                achievmentLink=\"https://en.wikipedia.org/wiki/Buran_(spacecraft)\"\n                illustrationPath={buranIllustration}\n                letters={[\"Ф\", \"Ё\", \"Ъ\"]}\n            />\n        </div>\n    );\n};\n\nexport default Levels;\n","export const shuffleArray = <T>(array: T[]) => {\n    var result = [...array];\n\n    var currentIndex = result.length,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        // And swap it with the current element.\n        [result[currentIndex], result[randomIndex]] = [\n            result[randomIndex],\n            result[currentIndex],\n        ];\n    }\n\n    return result;\n};\n","import { Impression } from \"../models/impression\";\n\nexport const getHiddenStateText = (impression: Impression) =>\n    impression.impressionType === \"cyrillic\"\n        ? `${impression.letter.upperCase}${impression.letter.lowerCase}`\n        : impression.letter.transliteration;\n\nexport const getRevealedStateText = (impression: Impression) =>\n    impression.impressionType === \"transcription\"\n        ? `${impression.letter.upperCase}${impression.letter.lowerCase}`\n        : impression.letter.transliteration;\n\nexport const getInstruction = (impression: Impression) =>\n    impression.impressionType === \"cyrillic\"\n        ? \"Try to remember the latin transcription.\"\n        : \"Try to remember the cyrillic.\";\n","import { CyrillicLetter } from \"../types/CyrillicLetter\";\n\nexport const cyrillicAlphabet: CyrillicLetter[] = [\n    {\n        upperCase: \"А\",\n        lowerCase: \"а\",\n        transliteration: \"a\",\n    },\n    {\n        upperCase: \"Б\",\n        lowerCase: \"б\",\n        transliteration: \"b\",\n    },\n    {\n        upperCase: \"В\",\n        lowerCase: \"в\",\n        transliteration: \"v\",\n    },\n    {\n        upperCase: \"Г\",\n        lowerCase: \"г\",\n        transliteration: \"g\",\n    },\n    {\n        upperCase: \"Д\",\n        lowerCase: \"д\",\n        transliteration: \"d\",\n    },\n    {\n        upperCase: \"Е\",\n        lowerCase: \"е\",\n        transliteration: \"ye\",\n    },\n    {\n        upperCase: \"Ё\",\n        lowerCase: \"ё\",\n        transliteration: \"yo\",\n    },\n    {\n        upperCase: \"Ж\",\n        lowerCase: \"ж\",\n        transliteration: \"zh\",\n    },\n    {\n        upperCase: \"З\",\n        lowerCase: \"з\",\n        transliteration: \"z\",\n    },\n    {\n        upperCase: \"И\",\n        lowerCase: \"и\",\n        transliteration: \"i\",\n    },\n    {\n        upperCase: \"Й\",\n        lowerCase: \"й\",\n        transliteration: \"y\",\n    },\n    {\n        upperCase: \"К\",\n        lowerCase: \"к\",\n        transliteration: \"k\",\n    },\n    {\n        upperCase: \"Л\",\n        lowerCase: \"л\",\n        transliteration: \"l\",\n    },\n    {\n        upperCase: \"М\",\n        lowerCase: \"м\",\n        transliteration: \"m\",\n    },\n    {\n        upperCase: \"Н\",\n        lowerCase: \"н\",\n        transliteration: \"n\",\n    },\n    {\n        upperCase: \"О\",\n        lowerCase: \"о\",\n        transliteration: \"o\",\n    },\n    {\n        upperCase: \"П\",\n        lowerCase: \"п\",\n        transliteration: \"p\",\n    },\n    {\n        upperCase: \"Р\",\n        lowerCase: \"р\",\n        transliteration: \"r\",\n    },\n    {\n        upperCase: \"С\",\n        lowerCase: \"с\",\n        transliteration: \"s\",\n    },\n    {\n        upperCase: \"Т\",\n        lowerCase: \"т\",\n        transliteration: \"t\",\n    },\n    {\n        upperCase: \"У\",\n        lowerCase: \"у\",\n        transliteration: \"u\",\n    },\n    {\n        upperCase: \"Ф\",\n        lowerCase: \"ф\",\n        transliteration: \"f\",\n    },\n    {\n        upperCase: \"Х\",\n        lowerCase: \"х\",\n        transliteration: \"kh\",\n    },\n    {\n        upperCase: \"Ц\",\n        lowerCase: \"ц\",\n        transliteration: \"ts\",\n    },\n    {\n        upperCase: \"Ч\",\n        lowerCase: \"ч\",\n        transliteration: \"ch\",\n    },\n    {\n        upperCase: \"Ш\",\n        lowerCase: \"ш\",\n        transliteration: \"sh\",\n    },\n    {\n        upperCase: \"Щ\",\n        lowerCase: \"щ\",\n        transliteration: \"shch\",\n    },\n    {\n        upperCase: \"Ъ\",\n        lowerCase: \"ъ\",\n        transliteration: '\" (hard sign)',\n    },\n    {\n        upperCase: \"Ы\",\n        lowerCase: \"ы\",\n        transliteration: \"y\",\n    },\n    {\n        upperCase: \"Ь\",\n        lowerCase: \"ь\",\n        transliteration: \"' (soft sign)\",\n    },\n    {\n        upperCase: \"Э\",\n        lowerCase: \"э\",\n        transliteration: \"e\",\n    },\n    {\n        upperCase: \"Ю\",\n        lowerCase: \"ю\",\n        transliteration: \"yu\",\n    },\n    {\n        upperCase: \"Я\",\n        lowerCase: \"я\",\n        transliteration: \"ya\",\n    },\n];\n","import classNames from \"classnames\";\nimport \"./Button.scss\";\n\ntype ButtonSize = \"normal\" | \"large\";\ntype ButtonKind = \"normal\" | \"primary\";\n\ntype ButtonProps = {\n    title: string;\n    onClick?: () => void;\n    cssClass?: string;\n    size?: ButtonSize;\n    kind?: ButtonKind;\n};\n\nconst Button = ({ title, onClick, cssClass, size, kind }: ButtonProps) => (\n    <button\n        onClick={onClick}\n        className={classNames(\"button\", cssClass, {\n            large: size === \"large\",\n            primary: kind === \"primary\",\n        })}\n    >\n        {title}\n    </button>\n);\n\nexport default Button;\n","import classNames from \"classnames\";\nimport \"./Card.scss\";\n\ntype CardProps = {\n    text: string;\n    itallic?: boolean;\n    className?: string;\n};\n\nconst Card = ({ text, itallic, className }: CardProps) => (\n    <div\n        className={classNames(\n            \"letter-card\",\n            {\n                itallic: !!itallic,\n            },\n            className\n        )}\n    >\n        <span>{text}</span>\n    </div>\n);\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/noun_Sputnik_190534_gray.7aa87151.svg\";","import classNames from \"classnames\";\nimport rocket from \"../../assets/illustrations/noun_Sputnik_190534_gray.svg\";\n\nimport \"./PracticeProgress.scss\";\n\ntype PracticeProgressProps = {\n    percentage: number;\n    className?: string;\n};\n\nconst RADIUS = 168;\nconst IMG_WIDTH = 36;\n\nconst PracticeProgress = ({ percentage, className }: PracticeProgressProps) => {\n    const degree = 360 * percentage + 180;\n    const size = RADIUS * 2 + IMG_WIDTH;\n\n    const x = RADIUS * Math.sin((degree * Math.PI) / 180);\n    const y = RADIUS * Math.cos((degree * Math.PI) / 180) * -1;\n\n    const marginLeft = (x - RADIUS) * -1;\n    const marginTop = (y - RADIUS) * -1;\n\n    return (\n        <div\n            className={classNames(\"root\", className)}\n            style={{ width: size, height: size }}\n        >\n            <img\n                src={rocket}\n                className=\"rocket\"\n                style={{\n                    width: IMG_WIDTH,\n                    marginLeft: marginLeft,\n                    marginTop: marginTop,\n                    transform: `rotate(${360 * percentage}deg)`,\n                }}\n                alt=\"rocket\"\n            />\n        </div>\n    );\n};\n\nexport default PracticeProgress;\n","import { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { shuffleArray } from \"../../functions/array\";\nimport {\n    getInstruction,\n    getHiddenStateText,\n    getRevealedStateText,\n} from \"../../functions/impression\";\nimport { cyrillicAlphabet } from \"../../models/cyrillicAlphabet\";\nimport { Impression, ImpressionType } from \"../../models/impression\";\nimport Button from \"../atoms/Button\";\nimport Card from \"../molecules/Card\";\nimport PracticeProgress from \"../organisms/PracticeProgress\";\nimport \"./Practice.scss\";\n\ntype PracticeProps = {\n    letters: string[];\n};\n\nconst Practice = ({ letters }: PracticeProps) => {\n    const [remainingImpressions, setRemainingImpressions] =\n        useState<Impression[]>();\n\n    const [currentImpression, setCurrentImpression] = useState<Impression>();\n    const [isRevealed, setIsRevealed] = useState(false);\n    const [initialImpressionCount, setInitialImpressionCount] = useState(0);\n\n    useEffect(() => {\n        const lettersToPractice = cyrillicAlphabet.filter((x) =>\n            letters.some((y) => y === x.upperCase)\n        );\n\n        const letterToPracticeDuplicated = [\n            ...lettersToPractice.map((x) => ({\n                letter: x,\n                impressionType: \"cyrillic\" as ImpressionType,\n            })),\n            ...lettersToPractice.map((x) => ({\n                letter: x,\n                impressionType: \"transcription\" as ImpressionType,\n            })),\n        ];\n\n        const shuffled = shuffleArray(letterToPracticeDuplicated);\n\n        setInitialImpressionCount(shuffled.length);\n        setCurrentImpression(shuffled[0]);\n        setRemainingImpressions(shuffled.slice(1));\n    }, [letters]);\n\n    const goToNextImpression = (nextRemainingImpressions: Impression[]) => {\n        if (!nextRemainingImpressions || nextRemainingImpressions.length < 1) {\n            return <Redirect to=\"/\" />;\n        }\n\n        const nextImpression = nextRemainingImpressions[0];\n        const updatedRemainingImpressions = nextRemainingImpressions.slice(1);\n\n        setIsRevealed(false);\n        setCurrentImpression(nextImpression);\n        setRemainingImpressions(updatedRemainingImpressions);\n    };\n\n    const answeredCorrectly = () => {\n        goToNextImpression(remainingImpressions ?? []);\n    };\n\n    const answeredWrongly = () => {\n        if (remainingImpressions === undefined) {\n            throw new Error(\n                \"Remaining impressions shouldn't be undefined at this point\"\n            );\n        }\n\n        if (currentImpression === undefined) {\n            throw new Error(\n                \"Remaining impressions shouldn't be undefined at this point\"\n            );\n        }\n\n        const alreadyHasAnotherImpressionInstance = remainingImpressions?.some(\n            (x) =>\n                x.impressionType === currentImpression?.impressionType &&\n                x.letter === currentImpression.letter\n        );\n\n        const updatedRemainingImpressions: Impression[] =\n            alreadyHasAnotherImpressionInstance\n                ? [...remainingImpressions, currentImpression]\n                : [\n                      ...remainingImpressions,\n                      currentImpression,\n                      currentImpression,\n                  ];\n\n        const shuffledRemainingImpressions = shuffleArray(\n            updatedRemainingImpressions\n        );\n\n        goToNextImpression(shuffledRemainingImpressions);\n    };\n\n    if (!currentImpression) {\n        return <></>;\n    }\n\n    const percentage =\n        initialImpressionCount -\n        (remainingImpressions?.length ?? 0) / initialImpressionCount;\n    console.log(percentage);\n\n    return (\n        <div className=\"practice-root\">\n            <div className=\"card-with-progress\">\n                <PracticeProgress\n                    className=\"practice-progress\"\n                    percentage={percentage}\n                />\n                <Card\n                    className=\"card\"\n                    text={\n                        !isRevealed\n                            ? getHiddenStateText(currentImpression)\n                            : getRevealedStateText(currentImpression)\n                    }\n                    itallic={\n                        !isRevealed\n                            ? currentImpression.impressionType ===\n                              \"transcription\"\n                            : currentImpression.impressionType !==\n                              \"transcription\"\n                    }\n                />\n            </div>\n            <div className=\"instruction\">\n                {!isRevealed\n                    ? getInstruction(currentImpression)\n                    : \"Did you get it right?\"}\n            </div>\n            {!isRevealed ? (\n                <Button\n                    title=\"Reveal answer\"\n                    size=\"large\"\n                    kind=\"primary\"\n                    onClick={() => setIsRevealed(true)}\n                />\n            ) : (\n                <div className=\"result-choices\">\n                    <Button title=\"No\" size=\"large\" onClick={answeredWrongly} />\n                    <Button\n                        title=\"Yes\"\n                        size=\"large\"\n                        kind=\"primary\"\n                        onClick={answeredCorrectly}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Practice;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.scss\";\nimport AppHeader from \"./components/organisms/AppHeader\";\nimport Footer from \"./components/organisms/Footer\";\nimport Levels from \"./components/pages/Levels\";\nimport Practice from \"./components/pages/Practice\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <AppHeader />\n                <div className=\"page-container\">\n                    <Switch>\n                        <Route\n                            path=\"/practice/:letters\"\n                            exact={false}\n                            render={(props: any) => {\n                                return (\n                                    <Practice\n                                        letters={JSON.parse(\n                                            props.match.params.letters\n                                        )}\n                                    />\n                                );\n                            }}\n                        ></Route>\n                        <Route path=\"/\">\n                            <Levels />\n                        </Route>\n                    </Switch>\n                </div>\n                <Footer />\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}